# DS Modules
import numpy as np
import pandas as pd

# Helpers
import helpers
import acquire


class FlavorProfile:

    def __init__(self, **kwargs):
        defaultKwargs = {
            'features' : ['volatile_acidity','chlorides','residual_sugar','alcohol'],
            'random_state': 8,
            'k' : 4
        }
        kwargs = { **defaultKwargs, **kwargs }
        
        self.features = kwargs['features']
        self.random_state = kwargs['random_state']
        self.n_clusters = kwargs['k']
    
    def fit(self, train):
        self.train = train
        self.fit_scaler()
        self.fit_clusterer()
        return self

    def fit_scaler(self):
        self.scaler = helpers.prep.train_scaler(self.train[self.features])
        self.scaled_train = self.train.copy()
        self.scaled_train[self.features] = self.scaler.transform(self.train[self.features])

    def fit_clusterer(self):
        self.clusterer = helpers.cluster.build_kmeans_clusterer(df=self.scaled_train, cols=self.features, k=self.n_clusters, random_state=self.random_state)

    def predict(self, df):
        temp_df = df.copy()
        temp_df[self.features] = self.scaler.transform(temp_df[self.features])
        y = self.clusterer.predict(temp_df[self.features])
        return y


def drop_outliers(df, dataset, method='iqr', **kwargs):
    '''Given a wine dataset, handle the outliers according to the specified method.

    By default a list of columns to manipulate is generated by the dataset parameter. This can be overriden by passing a list of column names in the cols parameter.

    Parameters
    ----------
    dataset : str
        Defines which type of wine the function is removing outlies for.  Must be either 'red' or 'white'.
    method : str
        Determines how outliers are identified
        "iqr" : Uses the 1.5 IQR method
        "manual" : Uses pre-defined and hard-coded cutoff limits for each column.
    '''

    default_cols = {
        'white' : [ 
            'citric_acid',
            'residual_sugar',
            'chlorides',
            'free_sulfur_dioxide',
            'total_sulfur_dioxide',
            'density',
            'sulphates',
        ],
        'red' : [
            'residual_sugar',
            'chlorides',
            'total_sulfur_dioxide',
            'sulphates',
        ]
    }

    defaultKwargs = {
        'cols': default_cols[dataset],
        'k' : 1.5
    }
    kwargs = { **defaultKwargs, **kwargs }

    if method == 'manual':
        manual_outlier_bounds = {
            'white': {
                # Determined by Luis's research
                'citric_acid'           : 1.25,
                'residual_sugar'        : 26,
                'chlorides'             : .250, 
                'volatile_acidity'      : .690,
                'free_sulfur_dioxide'   : 200,
                'total_sulfur_dioxide'  : 200,
                'density'               : 1,
                'sulphates'             : .900,
            },
            'red': {
                'fixed_acidity'         : 14,
                'volatile_acidity'      : 1,
                'citric_acid'           : .8,
                'residual_sugar'        : 8,
                'chlorides'             : .2,
                'total_sulfur_dioxide'  : 130,
                'free_sulfur_dioxide'   : 50,
                'density'               : 1.001,
                'ph'                    : 3.75,
                'sulphates'             : 1.25,
                'alcohol'               : 14,
            }
        }
        bounds = manual_outlier_bounds[dataset]

        for col in kwargs['cols']:
            if col not in bounds:
                raise Exception(f'"{col}" does not have a manual cutoff value defined. Use IQR method instead.')
            df = df[df[col] <= bounds[col]]
    
    elif method == 'iqr':
        from helpers.outliers import drop_upper_outliers
        df = drop_upper_outliers(df, kwargs['cols'], kwargs['k'])

    else: raise Exception('Invalid method supplied. Use "manual" or "iqr".')

    return df

def add_features(df):
    
    #'ions'= combo of chlorides and sulfates
    df['ions'] = df['chlorides']+df['sulphates']
    
    # 'hydronium' = ‘H+’ which is a derivative of pH where pH = -log[H3O+ concentration]
    df['hydronium'] = 10**(-df['ph'])
    
    # Bound sulfur dioxides: a measure of total sulfur dioxide minus free sulfur dioxide
    df['bound_sulfur_dioxide'] = df['total_sulfur_dioxide']-df['free_sulfur_dioxide']
    
    #combo of chlorides, sulfates, residual sugar, and free/total sulfur dioxide
    df['additives']=df['chlorides']+df['sulphates']+df['residual_sugar']+df['total_sulfur_dioxide']-df['free_sulfur_dioxide']
    
    return df